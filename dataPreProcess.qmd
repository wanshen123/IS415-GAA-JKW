---
title: "IS415-GAA Group 6: Data Pre-Processing - Geospatial Analysis of Recycling Bin Distribution in Singapore"
date: 03/25/2024
date-format: "DD/MM/YYYY"
editor: visual
---

# Package Loading: Loads necessary packages including spatial analysis libraries

```{r}
pacman::p_load(sf, sp, sfdep, tmap, tidyverse, plotly)
```

# Data Import

## Imports blue recycling bins `bluebins` data

*Blue Bin*

```{r}
bluebins <- st_read(dsn = "Data/gov", 
                 layer = "RECYCLINGBINS")
```

## Imports master plan subzone `mpsz` data

*Master Plan Subzone*

```{r}
mpsz <- st_read(dsn = "Data/prep", 
                 layer = "MPSZ-2019")
```

## Imports E-waste recycling bins `ewbins` data

*E-Waste Bin*

```{r eval=FALSE}
ewbins <- read_csv("Data/prep/EWbins.csv")
```

```{r echo=FALSE}
ewbins <- read_rds("Data/prep/ewbins.rds")
```

## Imports incentives recycling bins (RVM) `inbins` data

*Incentive Bin*

```{r eval=FALSE}
inbins <- read_csv("Data/prep/RVMbins.csv")
```

```{r echo=FALSE}
inbins <- read_rds("Data/prep/inbins.rds")
```


# Population Data Manipulation

*SG Population*

## Reads population data and aggregates it based on Planning Area (PA) and Subzone (SZ) with age groups.

```{r}
pop <- read_csv("Data/singstat/PopulationSG_2023.csv")
popdata <- pop %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  select(`PA`, `SZ`, 
       `TOTAL`)
```

## Converts PA and SZ to uppercase for consistency

```{r}
popdata <- popdata %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper))
```

## Joins population data with master plan subzone data

```{r}
pop <- left_join(mpsz, popdata,
                          by = c("SUBZONE_N" = "SZ"))
```

## Checks for and fixes invalid geometries in the population data

```{r}
# Check for invalid geometries
invalid_geoms <- !st_is_valid(pop)
# Fix invalid geometries
pop[invalid_geoms, ] <- st_make_valid(pop[invalid_geoms, ])
```

# Coordinate Transformation

## Transforms spatial data to a specific coordinate reference system (CRS) using EPSG:3414.

```{r}
pop <- st_transform(pop, 3414)
bluebins <- st_transform(bluebins, 3414)
ewbins <- st_transform(ewbins, 3414)
inbins <- st_transform(inbins, 3414)
```

# Geocoding

**Geocodes postal codes to obtain latitude and longitude coordinates using OpenStreetMap Nominatim API.**

```{r eval=FALSE}
```{r eval=FALSE}
# Function to geocode using OpenStreetMap Nominatim API
geocode_osm <- function(postal_codes) {
  result <- lapply(postal_codes, function(code) {
    url <- paste0("https://nominatim.openstreetmap.org/search?format=json&postalcode=", code, "&country=Singapore")
    data <- jsonlite::fromJSON(url)
    if (length(data) > 0) {
      return(data[1, c("lat", "lon")])
    } else {
      return(NA)
    }
  })
  result <- do.call(rbind, result)
  return(result)
}

# Extract postal codes from the CSV data
postal_codes <- ewbins$`Postal Code`

# Geocode postal codes using OpenStreetMap Nominatim API
geo_data_osm <- geocode_osm(postal_codes)

# Bind latitude and longitude data back to the original data frame
ewbins <- cbind(ewbins, geo_data_osm)
```

**Manually assigns latitude and longitude for specific postal codes if missing**

Input missing postal code for `ewbins`    
```{r eval=FALSE}
# Identify rows with missing lat or lon
missing_coords <- ewbins[is.na(ewbins$lat) | is.na(ewbins$lon), c("Postal Code", "lat", "lon")]

# Print the rows with missing coordinates
print(missing_coords)

```

```{r eval=FALSE}
row_indices <- c(19, 21, 23, 62, 64, 71, 123, 142, 146, 153, 164)
ewbins$lat[row_indices] <- c(1.353990, 
                             1.369590, 
                             1.285980, 
                             1.3732, 
                             1.3731, 
                             1.3106,
                             1.3247, 
                             1.2832, 
                             1.3335, 
                             1.3625, 
                             1.3840)  

ewbins$lon[row_indices] <- c(103.944250, 
                             103.846900, 
                             103.827370, 
                             103.8458, 
                             103.9337, 
                             103.8363,
                             103.7468, 
                             103.8058, 
                             103.7403, 
                             103.8347, 
                             103.7451)
```

```{r eval=FALSE}
# Convert to spatial points in WGS 84 (EPSG:4326)
coordinates <- st_as_sf(ewbins, coords = c("lon", "lat"), crs = 4326)

# Transform coordinates to SVY21 (EPSG:3414)
ewbins <- st_transform(coordinates, 3414)
```

**Convert postal code to obtain latitude and longitude coordinates and input missing postal code for `inbins`**

```{r eval=FALSE}
# Extract postal codes from the CSV data
postal_codes <- inbins$`Postal Code`

# Geocode postal codes using OpenStreetMap Nominatim API
geo_data_osm <- geocode_osm(postal_codes)

# Bind latitude and longitude data back to the original data frame
inbins <- cbind(inbins, geo_data_osm)

# Identify rows with missing lat or lon
missing_coords <- inbins[is.na(inbins$lat) | is.na(inbins$lon), c("Postal Code", "lat", "lon")]

# Print the rows with missing coordinates
print(missing_coords)
```

```{r eval=FALSE}
row_indices <- c(3, 8, 10, 12, 14, 24, 25, 26)
inbins$lat[row_indices] <- c(1.37045, 
                            1.32099,
                            1.33306,
                            1.35547,
                            1.29948,
                            1.34649,
                            1.35878,
                            1.39071)  

inbins$lon[row_indices] <- c(103.88808,
                             103.88775,
                             103.96604,
                             103.85110,
                             103.84547,
                             103.72905,
                             103.75281,
                             103.74852)
```

```{r eval=FALSE}
# Convert to spatial points in WGS 84 (EPSG:4326)
coordinates <- st_as_sf(inbins, coords = c("lon", "lat"), crs = 4326)

# Transform coordinates to SVY21 (EPSG:3414)
inbins <- st_transform(coordinates, 3414)
```

# Cleaning up unnecessary columns and tidying the data

```{r eval=FALSE}
subzone_matched <- st_intersection(bluebins, pop)
subzone_matched <- st_drop_geometry(subzone_matched)
joined_data <- left_join(pop, subzone_matched)
```

```{r eval=FALSE}
joined_data_clean <- na.omit(joined_data)
```

```{r eval=FALSE}
joined_data_clean <- joined_data[complete.cases(joined_data$ADDRESSSTR), ]
```


# HSCA Data Analysis Preparation

```{r eval=FALSE}
grouped_data <- joined_data_clean %>%
  group_by(SUBZONE_N, REGION_N) %>%
  summarize(count = n())

grouped_data <- st_drop_geometry(grouped_data)
grouped_data <- left_join(pop, grouped_data)

columns_to_keep <- c("SUBZONE_N", "REGION_N", "count")  

grouped_data <- grouped_data[, columns_to_keep]

grouped_data <- grouped_data %>%
  mutate(count = ifelse(is.na(count), 0, count))
```

## Add new column TYPE to the 3 bins data
```{r eval=FALSE}
grouped_data <- grouped_data %>% 
  mutate(TYPE = "BLUEBIN")
```

```{r}
bluebins_hs <- read_rds("Data/prep/bluebins_dist.rds")
ewbins_hs <- read_rds("Data/prep/ewbins_dist.rds")
inbins_hs <- read_rds("Data/prep/inbins_dist.rds")
```

## Computes spatial weights for spatial autocorrelation analysis using contiguity and inverse distance
```{r}
wm_q <- bluebins_hs %>%
  mutate(nb = st_contiguity(geometry, queen = TRUE),
         wt = st_weights(nb,
                         style = "W",
                         allow_zero = TRUE),
         .before = 1) 
wm_q
```

```{r}
set.seed(1234)
global_moran_perm(wm_q$count,
                       wm_q$nb,
                       wm_q$wt,
                  zero.policy = TRUE,
                  nsim = 999)
```

## Conducts global Moran's I test and Local Indicators of Spatial Association (LISA) analysis for spatial autocorrelation
```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    count, nb, wt, zero.policy = TRUE, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

## Performs local G* analysis for hot spot detection
```{r}
wm_idw <- bluebins_hs %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    count, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
```
